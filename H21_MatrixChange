//각 요소의 행,열의 값을 바꾼뒤 행,열의 크기를 서로 비교하여 낮은 것 부터 배열한다.
//입력값: SparseMatrix B={{{0,1,1},{1,0,2},{1,2,3},{2,0,4},},3,3,4};
//결과값: B^T={{{0,1,2},{0,2,4},{1,0,1},{2,1,3},},3,3,4};

#include <stdio.h>
#define ROWS 3
#define COLS 3
#define MAX_TERMS 10

typedef struct {
	int row;
	int col;
	int value;
}element;

typedef struct SparseMatrix {
	element data[MAX_TERMS];
	int rows;
	int cols;
	int terms;
}SparseMatrix;

int main(){
	SparseMatrix b={{{0,1,1},{1,0,2},{1,2,3},{2,0,4},},3,3,4};
	printf("B\n");
	for(int i=0;i<b.terms;i++){
		printf("%d %d %d \n",b.data[i].row,b.data[i].col,b.data[i].value);
	}
	for(int i=0;i<b.terms;i++){
		int keep;
		keep=b.data[i].row;
		b.data[i].row=b.data[i].col;
		b.data[i].col=keep;
	}
	
	element set=b.data[0];
	int time=0;
	while(time<b.terms){
	
		for (int i=1;i<b.terms;i++){
			if (set.row<b.data[i].row){
				set=b.data[i];
			}
			else if(set.row=b.data[i].row){
				if(set.col<b.data[i].col){
					set=b.data[i];
				}
			}
			else{
				element temp=b.data[i];
				b.data[i]=b.data[i-1];
				b.data[i-1]=temp;
				
			 }
		}
		time++;
		
	}
		

				
	printf("B^T\n");
	for(int i=0;i<b.terms;i++){
		printf("%d %d %d \n",b.data[i].row,b.data[i].col,b.data[i].value);
	}

}
