// Stable selection sort

#include "stack"
#include "stdlib.h"
#include "stdio.h"
#include "string.h"

typedef struct data {
	int *id;   //배열임!!! 그래서 포인터 씀!!! 
	int *score;

} data;

data *output= (data *)malloc(sizeof(data)); //output할 data structure생성 

#define SWAP(x, y, t) ( (t)=(x), (x)=(y), (y)=(t) )
void selection_sort(data *list, int n)
{
	int i, j, least, temp;
	for (i = 0; i < n - 1; i++) {
		least = i;
		for (j = i + 1; j<n; j++)
			if (list->score[j]<list->score[least]) least = j;
		SWAP(list->score[i], list->score[least], temp);
		SWAP(list->id[i], list->id[least], temp);
	}
}

void selection_sort_stable(data *list, int n)
{
	int j, least;
	int i=0; //output의 index 
	while(true) {
		least = 0;
		 //(남은)input array 처으부터 끝까지 서치하며 가장 작은 값 찾기 
		for (j = least + 1; j<n; j++){ 
			if (list->score[j] < list->score[least])   
				least = j;   //제일 작은 값의 index를 least에 저장하기 
		}
		output->score[i]=list->score[least];
		output->id[i]=list->id[least];
		for(int k=least;k<n-1 ;k++){  //남은array 앞으로 땡기기 
			list->id[k]=list->id[k+1];
			list->score[k]=list->score[k+1];
		}
		i++; //output의 index증가 
		n--;  //input array의 길이 줄이기 
		if (n == 0) // input array의 길이가 0일때. 
			break;
	}
}


int main()
{
	int data_id[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	int data_score[] = { 30, 25, 10, 20, 80, 30, 25, 10 };

	int in_size = 8;
	data *input = (data *)malloc(sizeof(data));
	
	input->id = data_id;
	input->score = data_score;


	//Print out the input data
	printf("Input data\n");
	for (int i = 0; i < in_size; i++)
		printf("%d\t %d\n", input->id[i], input->score[i]);
	printf("\n");

	// Produce the stable sorting results by replacing 'selection_sort' with 'selection_sort_stable'.
	selection_sort_stable(input, in_size);
//	selection_sort(input, in_size);
	
	//Print out the sorted data
/*	printf("Sorted data\n");
	for (int i = 0; i < in_size; i++)
		printf("%d\t %d\n", input->id[i], input->score[i]);
*/	printf("\n\n");
	printf("Stable Sorted data\n");
	for (int i = 0; i < in_size; i++)
		printf("%d\t %d\n", output->id[i], output->score[i]);
		
    return 0;
}
