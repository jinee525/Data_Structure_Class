//linked list로 정의된 hash table 이용

#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <stack>
#include <algorithm>
#include <string.h>  //문자열비교위한 라이브러리 


#define KEY_SIZE 10
#define TABLE_SIZE 13
typedef struct element {
	char key[KEY_SIZE];
} element;
typedef struct ListNode {
	element item;
	ListNode *link;
} ListNode;

ListNode *hash_table[TABLE_SIZE];   //hash table 생성 
// Transform the string key into an integer by summing ASCII codes
int transform(char *key) {
	int number = 0;
	while (*key)
		number += *key++;
	return number;
}
// Division function ( key mod TABLE_SIZE )
int hash_function(char *key) {
	return transform(key) % TABLE_SIZE;
}

int equal(element e1, element e2){
	if(strcmp(e1.key, e2.key) == 0)
		return 1;
	else
		return 0;
}
void hash_chain_add(element item, ListNode *ht[])
{
	int hash_value = hash_function(item.key);
	ListNode *ptr;
	ListNode *node_before = NULL;
	ListNode *node = ht[hash_value];
	printf("H %d\n",hash_value);
	
	for (; node; node_before = node, node = node->link)
	{
		if (equal(node->item, item) == 1) {
			fprintf(stderr, "Duplicate search key\n");
			return;
		}
	}
	ptr = (ListNode *)malloc(sizeof(ListNode));
	ptr->item = item;
	ptr->link = NULL;
	if (node_before)
		node_before->link = ptr;
	else
		ht[hash_value] = ptr;
}
void hash_chain_delete(element item, ListNode *ht[])
{
	int out=0;
	ListNode *node;
	ListNode *node_before = NULL;
	int hash_value = hash_function(item.key);  //찾을 해쉬값 
	printf("Hash value: %d\n",hash_value);
	
	for (node = ht[hash_value]; node; node_before = node, node = node->link) {
		if (equal(node->item, item) == 1) {
			if(node_before == NULL){ //linked list node only one
				if(node->link != NULL){
					ht[hash_value]=node->link;	  
					out=1;
					break;			
				}
				ht[hash_value]=NULL;    //node와 원본 구분잘하기!!! 
				out=1;
				break;
				}
			else{
				node_before->link=node->link;
				out=1;
				break;
			} 
		}
	}
	if (out == 0)
			printf("No key\n");
}

void hash_chain_search(element item, ListNode *ht[])
{
	ListNode *node;
	int hash_value = hash_function(item.key);
	for (node = ht[hash_value]; node; node = node->link) {
		if (equal(node->item, item)) {
			printf("Search success\n");
			return;
		}
	}
	printf("Search failed\n");
}
void hash_chain_print(ListNode *ht[])
{
	ListNode *node;
	for (int i = 0; i < TABLE_SIZE; i++) {
		printf("[%d]", i);
		for (node = ht[i]; node; node = node->link)
			printf(" -> %s", node->item.key);
		printf(" -> null\n");
	}
}
void init_table(ListNode *ht[])
{
	for (int i = 0; i < TABLE_SIZE; i++)
		ht[i] = NULL;//each node is initialized as null
}
int main()
{
	element tmp;
	int op;
	init_table(hash_table);
	while (1) {
		printf("Enter the operation to do (0: insert, 1: delete, 2: search, 3: termination): ");
		scanf("%d", &op);
		if (op == 3) break;
		printf("Enter the search key: ");
		scanf("%s", tmp.key, sizeof(tmp.key));
		if (op == 0)
			hash_chain_add(tmp, hash_table);
		else if (op == 1)
			hash_chain_delete(tmp, hash_table);
		else if (op == 2)
			hash_chain_search(tmp, hash_table);
		hash_chain_print(hash_table);
		printf("\n");
	}
}
