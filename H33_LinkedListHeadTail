
#include <malloc.h>
#include <stdio.h>

typedef int element;

typedef struct ListNode {
	element data;
	struct ListNode *link;
} ListNode;     //노드 구조 정의 

typedef struct {
	ListNode *head;// Head pointer
	ListNode *tail;// Tail pointer
	int length;// # of nodes
} ListType;  //리스트 구성 요소 정의 

ListType list1;  //리스트1 선언 

void init(ListType *plist) {
	plist->length = 0;
	plist->head = plist->tail = NULL;
}

int is_in_list(ListType *list, element item)
{
	ListNode *p;
	p = list->head;
	while ((p != NULL)) {
		if (p->data == item)
		break;
		p = p->link;
	}
	if (p == NULL) return 0;
	else return 1;
}

ListNode *get_node_at(ListType *list, int pos)
{
	int i;
	ListNode *tmp_node = list->head;
	if (pos < 0) return NULL;
	for (i = 0; i<pos; i++)
		tmp_node = tmp_node->link;
	return tmp_node;
}

element get_entry(ListType *list, int pos)
{
	ListNode *p;
	p = get_node_at(list, pos);
	return p->data;
}

void display(ListType *list)
{
	int i;
	ListNode *node = list->head;
	printf("( ");
	for (i = 0; i<list->length; i++) {
		printf("%d ", node->data);
		node = node->link;
	}
	printf(" )\n");

}
void add_first(ListType *plist, int value){
	ListNode *temp = (ListNode *)malloc(sizeof(ListNode));
	temp->data=value;
	if (plist->head==NULL){
		plist->head=temp;
		temp->link=NULL;
		plist->tail=temp;
	}
	else {
	temp->link=plist->head;
	plist->head=temp;
	}
	plist->length+=1;     //리스트의 길이 수정하기!! 꼭! 
}


void add_last(ListType *plist, int value){
	ListNode *temp = (ListNode *)malloc(sizeof(ListNode));
	temp->data=value;
	plist->tail->link=temp;
	plist->tail=temp;
	temp->link=NULL;
	plist->length+=1;
}

 

void insert_node(ListNode *head,ListNode *p, ListNode *node){
		node->link=p->link;
		p->link=node;
}

void add(ListType *list, int position, element data)

{

	ListNode *p;

	if ((position >= 0) && (position <= list->length)) {
		ListNode *node = (ListNode *)malloc(sizeof(ListNode));
		node->data = data;
		p = get_node_at(list, position - 1);
		insert_node(list->head,p, node);
	}
	list->length+=1;

}

void remove_node(ListNode *head, ListNode *p, ListNode *removed){
	ListNode *temp=(ListNode*)malloc(sizeof(ListNode));
	temp=removed;
	p->link=removed->link;
	free(temp);
}

void deletee (ListType *list, int pos)
{
	ListNode *p = get_node_at(list, pos - 1);
	ListNode *removed = get_node_at(list, pos);
	remove_node(list->head,p, removed);
	list->length-=1;
}

void delete_first(ListType *list){

	ListNode *temp=list->head;
 	list->head=list->head->link;
 	free(temp);
 	list->length-=1;
}

void delete_last(ListType *list){

	ListNode *temp=list->tail;
	int i=list->length;
	i=i-2;
	ListNode *p = get_node_at(list, i);
	p->link=NULL;
	list->tail=p;
 	list->length-=1;
}

int main()
{

ListType list1;
init(&list1);   //초기화 
add_first(&list1, 20);
display(&list1);
add_last(&list1, 30);
display(&list1);
add_first(&list1, 10);
display(&list1);
add_last(&list1, 40);
display(&list1);
add(&list1, 2, 70);
display(&list1);

 
deletee(&list1, 2);
display(&list1);
delete_first(&list1);
display(&list1);
delete_last(&list1);
display(&list1);

printf("%s\n", is_in_list(&list1, 20) == 1 ? "TRUE": "FALSE");
printf("%d\n", get_entry(&list1, 0));

}
